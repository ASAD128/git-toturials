https://www.lynda.com/Git-tutorials

git config --system
/etc/gitconfig

git config --global User
/home/asad/.gitconfig

Project
git config
project/.git/config

distributed version control system (fork, clone, merge)

Updating Config file
git config --global user.name
git config --global core.editor

Git auto completion

Git help log

git log -n 2

git log --since
git log --until
git log --author
git log --grep "Init"

Architecture
Repository
Staging index (git commit go repository)
Working directory (git add go staging)

Head is a pointer reisdes at the tip of current branch

git diff (working and repository)
git diff --staged (staging and repositoy)

git reset or git reset HEAD -- filename.txt
git mv first.txt second.txt

Git diff color--words first.txt

git commit -am "Message" be very carefull while using -a it add and commit in one line but didn't care about new and deleted file

Undo
Undo Git Changes working directory
git checkout delete.txt undo changes in working directory and make it similar like repository
Undo Git Changes staging
git reset HEAD filename.txt

git revert to previous commit


if we want to reset or rollback to 2 or 3 commit before use git reset
git reset --soft 4b039a99ce0 (Only remove from repository)
git reset --mixed (Remove changes from staging, make repo and staging similar but still have changed file inside working directory)
git reset --hard (Very weird delete every thing from working directory, staging, repo to previous commit)

To remove untracked file
git clean -n 
git clean -f

gitignore
zip, compress, images, videos, log, compiled code, dynamic contend, OS specific file
https://gitbub.com/github/gitignore

.gitignore_global in User directory
git config --global core.excludesfile ~./.gitignore_global

Remove file from staging and stop git to tracking and add in git ignore file
git rm --cached delete.txt

.gitkeep to track empty repo's

git log before "2016-06-20"
git log author "asad"
git log --graph
git log --oneline --graph --all --decorate 
git log --grep="Init"
git log a4f1e.. file.txt
git ls-tree HEAD

git ls-tree Master
git show a4f1e
git show HEAD~2 or git show HEAD^^ grand parent of last commit
git diff dcf6b336 give the difference bwteen current and given commit 
git diff dcf6b336..dcfgh453 Give the difference between two commit
git diff -w dcf6b336..dcfgh453 -w ignore whilespace
git diff --summary --stat

GIT branches
Git branch branch_name(TO create a new branch)
git checkout branch_name
git checkout -b branch_name (create new branch and checkout)
git diff --color-words master..new_branch  
git diff --color-words master..new_branch^
git branch --merged

Rename branch
git branch -m branch1 branch2
git branch --move branch1 branch2

Delete branch
git branch -d branch_name
git branch -D branch_name (if want to delete the branch which has serval commits )

__git_ps1
echo $PS1

Git merge
Strategies

git checkout master
git merge branch_name (either fast forward or real, no-ff or ff-only) ff only possible only one commit ahead of master, if master has more commit than can't do ff 

Keep commit short
Merge often to master
Merge master changes to your branch frequently    




git mergetool --tool=toolname 





